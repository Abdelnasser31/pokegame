{"version":3,"sources":["Pokecard/Pokecard.js","Pokedex/Pokedex.js","PokemonLoader/PokemonLoader.js","Pokegame/Pokegame.js","App.js","serviceWorker.js","index.js"],"names":["Pokecard","number","this","props","name","id","type","base_experience","imgSrc","slice","className","src","alt","Component","Pokedex","title","data","isWinner","winner","Exp","map","pokemon","types","PokemonLoader","pokemonsData","Pokegame","state","pokemons","fetchPokemons","a","i","randomPoke","Math","floor","random","fetch","response","json","push","console","log","setState","data1","data2","data1Exp","reduce","b","data2Exp","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iYA0BeA,G,MApBf,iLAIY,IAPKC,EAON,EACmCC,KAAKC,MAAxCC,EADA,EACAA,KAAMC,EADN,EACMA,GAAIC,EADV,EACUA,KAAMC,EADhB,EACgBA,gBACnBC,EAAM,UAVG,8DAUH,QATGP,EASyBI,IATJ,IAClC,YAAKJ,GAASQ,OAAO,GACrBR,EAOU,QACV,OACE,yBAAKS,UAAU,YACb,yBAAKA,UAAU,kBACb,yBAAKC,IAAKH,EAAQI,IAAKR,KAEzB,wBAAIM,UAAU,iBAAiBN,GAC/B,oCAAUE,GACV,mCAASC,QAdjB,GAA8BM,cC4BfC,G,MA/Bf,iLACc,IAGFC,EAHC,EAEgCb,KAAKC,MAAnCa,EAFF,EAEEA,KAAcC,EAFhB,EAEQC,OAAiBC,EAFzB,EAEyBA,IAO9B,OAJIJ,EADDE,EACS,wBAAIP,UAAU,mBAAd,gBAEA,wBAAIA,UAAU,kBAAd,eAGR,6BACA,6BACMK,EACH,wBAAIL,UAAU,gBAAd,cAA0CS,EAA1C,MAEH,yBAAKT,UAAY,WAEZM,EAAKI,KAAI,SAAAC,GAAO,OACb,kBAAC,EAAD,CAAUhB,GAAMgB,EAAQhB,GACdD,KAAQiB,EAAQjB,KAChBE,KAAQe,EAAQC,MAAM,GAAGhB,KAAKF,KAC9BG,gBAAmBc,EAAQd,2BAtBzD,GAA6BM,cCwBdU,G,MAzBf,iLAEI,OACA,yBAAKb,UAAU,eACX,wCACF,yBAAKA,UAAU,eACb,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,+BAEF,gDAnBN,GAAmCG,cCE/BW,G,MAAe,IAuCJC,EAtCf,2MACIC,MAAQ,CACNC,SAAU,MAFhB,EAOKC,cAPL,sBAOqB,kCAAAC,EAAA,sDACPC,EAAI,EADG,YACAA,EAAG,GADH,wBAELC,EAAaC,KAAKC,MAAsB,IAAhBD,KAAKE,UAFxB,SAGeC,MAAM,qCAAD,OAAsCJ,IAH1D,cAGHK,EAHG,gBAIUA,EAASC,OAJnB,OAIHA,EAJG,OAKTb,EAAac,KAAKD,GAClBE,QAAQC,IAAIH,EAAKf,MAAM,GAAGhB,KAAKF,MANtB,QACM0B,IADN,uBAUf,EAAKW,SAAS,CAACd,SAAUH,IAVV,4CAPrB,mFAKQtB,KAAK0B,kBALb,+BAoBQ,IAAI1B,KAAKwB,MAAMC,SACX,OAAO,kBAAC,EAAD,MAEX,IAAMe,EAAQxC,KAAKwB,MAAMC,SAASlB,MAAM,EAAE,GACpCkC,EAAQzC,KAAKwB,MAAMC,SAASlB,MAAM,GAClCmC,EAAWF,EAAMG,QAAO,SAAChB,EAAGiB,GAAJ,OAAUjB,EAAIiB,EAAEvC,kBAAiB,GACzDwC,EAAWJ,EAAME,QAAO,SAAChB,EAAGiB,GAAJ,OAAUjB,EAAIiB,EAAEvC,kBAAiB,GACzDU,EAAW2B,EAAWG,EAC5B,OACI,yBAAKrC,UAAU,YACX,kBAAC,EAAD,CAASM,KAAQ0B,EAAOxB,OAAQD,EAAUE,IAAKyB,IAC/C,kBAAC,EAAD,CAAS5B,KAAQ2B,EAAOzB,QAASD,EAAUE,IAAK4B,SA/BhE,GAA8BlC,aCSfmC,MAVf,WACE,OACE,yBAAKtC,UAAU,OAEb,kBAAC,EAAD,QCIcuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.698fe6a3.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './Pokecard.css';\r\nconst POKE_API = 'https://assets.pokemon.com/assets/cms2/img/pokedex/detail/';\r\nlet padToThree = number => (number <= 999\r\n  ? `00${number}`.slice(-3)\r\n  : number)\r\nexport class Pokecard extends Component {\r\n  // padToThree(id) {    if(Math.floor(id / 10) === 0){         return `00${id}`;\r\n  //   }else if(Math.floor(id / 100) === 0){        return `0${id}`    }    return\r\n  // id }\r\n  render() {\r\n    const {name, id, type, base_experience} = this.props;\r\n    let imgSrc = `${POKE_API}${padToThree(id)}.png`\r\n    return (\r\n      <div className=\"Pokecard\">\r\n        <div className='Pokecard-image'>\r\n          <img src={imgSrc} alt={name}/>\r\n          </div>\r\n        <h3 className=\"Pokecard-name\">{name}</h3>\r\n        <p>Type: {type}</p>\r\n        <p>EXP: {base_experience}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Pokecard;\r\n","import React, { Component } from 'react';\r\nimport Pokecard from '../Pokecard/Pokecard';\r\nimport './Pokedex.css';\r\nexport class Pokedex extends Component {\r\n    render() {\r\n       \r\n        const {data, winner: isWinner,Exp} = this.props;\r\n        let title;\r\n        if(isWinner) {\r\n            title = <h1 className='Pokegame-winner'>Winning Hand</h1>\r\n        }else{\r\n            title = <h1 className='Pokegame-loser'>Losing Hand</h1>\r\n        }\r\n        return (\r\n            <div>\r\n            <div>\r\n                 {title}\r\n               <h3 className='Pokegame-exp' >Total Exp: {Exp} </h3>\r\n            </div>\r\n            <div className = 'Pokedex'>\r\n              \r\n                {data.map(pokemon => \r\n                    <Pokecard id = {pokemon.id}\r\n                              name = {pokemon.name}\r\n                              type = {pokemon.types[0].type.name}\r\n                              base_experience = {pokemon.base_experience}\r\n                              />\r\n                )}\r\n            </div></div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Pokedex;\r\n","import React, {Component} from 'react'\r\nimport './PokemonLoader.css'\r\nexport class PokemonLoader extends Component {\r\n  render() {\r\n    return (\r\n    <div className='Poke-loader'>\r\n        <h2>Ready To</h2>\r\n      <div className=\"lds-spinner\">\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n      </div>\r\n      <h2>Poke Battle</h2>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default PokemonLoader\r\n","import React, { Component } from 'react';\r\nimport Pokedex from '../Pokedex/Pokedex';\r\nimport PokeLoader from '../PokemonLoader/PokemonLoader'\r\nimport './Pokegame.css';\r\nlet pokemonsData = [];\r\nexport class Pokegame extends Component {\r\n    state = {\r\n      pokemons: null\r\n    }\r\n    componentDidMount() {\r\n        this.fetchPokemons();\r\n    }\r\n     fetchPokemons = async () =>  {\r\n      for(let i = 0; i< 8; i++) {\r\n            let randomPoke = Math.floor(Math.random() * 800);\r\n            const response =  await fetch(`https://pokeapi.co/api/v2/pokemon/${randomPoke}`);\r\n            const json = await response.json();\r\n            pokemonsData.push(json);\r\n            console.log(json.types[0].type.name)\r\n            \r\n\r\n      }\r\n      this.setState({pokemons: pokemonsData})\r\n    }\r\n    render() {\r\n        if(!this.state.pokemons){\r\n            return <PokeLoader/>\r\n        }\r\n        const data1 = this.state.pokemons.slice(0,4);\r\n        const data2 = this.state.pokemons.slice(4);\r\n        const data1Exp = data1.reduce((a, b) => a + b.base_experience, 0);\r\n        const data2Exp = data2.reduce((a, b) => a + b.base_experience, 0);\r\n        const isWinner = data1Exp > data2Exp;\r\n        return (\r\n            <div className='Pokegame'> \r\n                <Pokedex data = {data1} winner={isWinner} Exp={data1Exp}/>\r\n                <Pokedex data = {data2} winner={!isWinner} Exp={data2Exp}/> \r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Pokegame;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Pokegame from './Pokegame/Pokegame';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      \r\n      <Pokegame />\r\n  \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}